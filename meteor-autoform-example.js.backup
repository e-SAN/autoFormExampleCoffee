if (Meteor.isClient) {
  SimpleSchema.debug = true;

  Session.setDefault("showPersonForm", true);

  Meteor.subscribe("docs");
  Meteor.subscribe("persons");
  Meteor.subscribe("dates");

  var contactCB = {
    after: {
      sendEmail: function() {
        console.log("after sendEmail hook");
      }
    },
    onSubmit: function() {
      console.log("onSubmit hook");
      //this.resetForm();
      //return false;
    }
  };

  AutoForm.hooks({
    docForm: {
      before: {
        insert: function(doc) {
          console.log("before.insert received document", doc);
          return doc;
        }
      },
      docToForm: function(doc) {
        if (_.isArray(doc.optionalStringArray)) {
          doc.optionalStringArray = doc.optionalStringArray.join(", ");
        }
        return doc;
      },
      formToDoc: function(doc) {
        if (typeof doc.optionalStringArray === "string") {
          doc.optionalStringArray = doc.optionalStringArray.split(",");
        }
        return doc;
      }
    },
    contactForm: contactCB,
    contactForm2: contactCB,
    contactForm3: contactCB,
    personsForm: {
      before: {
        remove: function(id) {
          var name = Persons.findOne(id).fullName;
          return confirm("Remove " + name + "?");
        }
      }
    }
  });

  AutoForm.addHooks(['docForm', 'datesForm1', 'datesForm2', 'datesForm3', 'myQuickForm'], {
    after: {
      insert: function(error, result) {
        if (error) {
          console.log("Insert Error:", error);
        } else {
          console.log("Insert Result:", result);
        }
      },
      update: function(error) {
        if (error) {
          console.log("Update Error:", error);
        } else {
          console.log("Updated!");
        }
      },
      remove: function(error) {
        console.log("Remove Error:", error);
      }
    }
  });

  AutoForm.addHooks(null, {
    onSubmit: function () {
      console.log("onSubmit ALL FORMS!", arguments);
    }
  });

  Documents.simpleSchema().validator(function(key, val, def) {
    if (val === "d") {
      return "noD";
    }
    return true;
  });

  Template.example.docsCollection = function() {
    return Documents;
  };

  Template.example.selectedDoc = function() {
    return Documents.findOne(Session.get("selectedDoc"));
  };

  Template.example.newDocMode = function() {
    return !Session.get("selectedDoc");
  };

  Template.example.tester = {};

  Template.datesForm.dateDoc = function() {
    return null;
    //return Dates.findOne({_id: "pR95N5sxMTsaXe8e8"});
  };

  Template.datesForm.dateTimeDoc = function() {
    return null;
    //return Dates.findOne({_id: "TfFqjdJ6EYfjAdhE3"});
  };

  Template.datesForm.dateTimeLocalDoc = function() {
    return null;
    //return Dates.findOne({_id: "pMcpm4vxkA5Hq4SyM"});
  };

  Template.datesForm.today = function() {
    return dateToDateString(new Date);
  };

  UI.body.testData = function bodyTestDataHelper() {
    if (Session.get("selectedDoc")) {
      return {docFormType: "update"};
    } else {
      return {docFormType: "insert"};
    }
  };

  var dateToDateString = function(date) {
    var m = (date.getMonth() + 1);
    if (m < 10) {
      m = "0" + m;
    }
    var d = date.getDate();
    if (d < 10) {
      d = "0" + d;
    }
    return date.getFullYear() + '-' + m + '-' + d;
  };

  Template.docTable.documents = function() {
    return Documents.find();
  };

  Template.example.events({
    'click .docSelect': function(e, t) {
      e.preventDefault();
      AutoForm.resetForm("docForm");
      Session.set("selectedDoc", this._id);
    },
    'click .docClear': function(e, t) {
      e.preventDefault();
      AutoForm.resetForm("docForm");
      Session.set("selectedDoc", null);
    }
  });

  Template.virtualFields.persons = function() {
    return Persons.find().fetch();
  };

  Template.virtualFields.showPersonForm = function () {
    return Session.get("showPersonForm");
  };

  Template.reactiveCurrentValue.currentAFieldValue = function () {
    return AutoForm.getFieldValue("reactiveCurrentValueForm", "a") || "not selected";
  };

  UI.registerHelper("numSelectOptions", function(options) {
    return [
      {label: "One", value: 1},
      {label: "Two", value: 2},
      {label: "Three", value: 3}
    ];
  });

  UI.registerHelper("log", function(what, who) {
    console.log(what, who);
  });
}


